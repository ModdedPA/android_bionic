/* -*- c++ -*- */
#ifndef __NEW__
#define __NEW__

#include <cstddef>

extern "C++" {

namespace std {
    struct nothrow_t {};
    extern const nothrow_t nothrow;
#if __cplusplus >= 201103L
    class bad_array_new_length : public bad_alloc
    {
        public:
            bad_array_new_length() throw() { };
        
        // This declaration is not useless:
        // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
        virtual ~bad_array_new_length() throw();
        // See comment in eh_exception.cc.
        virtual const char* what() const throw();
    };
#endif
}

void* operator new(std::size_t);
void* operator new[](std::size_t);
void  operator delete(void*);
void  operator delete[](void*);
void* operator new(std::size_t, const std::nothrow_t&);
void* operator new[](std::size_t, const std::nothrow_t&);
void  operator delete(void*, const std::nothrow_t&);
void  operator delete[](void*, const std::nothrow_t&);

inline void* operator new(std::size_t, void* p) { return p; }
inline void* operator new[](std::size_t, void* p) { return p; }

// these next two are not really required, since exceptions are off
inline void  operator delete(void*, void*) { }
inline void  operator delete[](void*, void*) { }

}  // extern C++

#endif // __NEW__
